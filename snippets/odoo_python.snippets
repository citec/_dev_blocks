global !p
def points2underscores(txt):
	return txt.replace('.', '_')

def underscores2points(txt):
	return txt.replace('_', '.')
endglobal

snippet start
# -*- coding: utf-8 -*-
$0

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
endsnippet

snippet importopenerp
from openerp.osv import osv, fields, orm
from openerp.tools.translate import _
$0
endsnippet

snippet class
class ${1:modulenale_modelname}(osv.osv):
    _name = '`!p snip.rv = underscores2points(t[1])`'
    _inherit = '`!p snip.rv = underscores2points(t[1])`'
    _description = u'${2:put some model description here}'

	$0
endsnippet

# Field types

snippet fchar
'${1:fieldname}': fields.char(u'${2:Field Name}', size=${3:64}, required=${4:False}, ${5:translate=True, }${6:track_visibility='${7:onchange}', }${8:help=u'${9:Some help here}', }),
$0
endsnippet

snippet fo2m
'${1:fieldname}': fields.one2many('${2:reference.model}', '${3:reference_field}_id', u'${4:Field Name}', required=${5:False}, ${6:domain=[('parent_id', '=', False)], }${7:track_visibility='${8:onchange}', }${9:help=u'${10:Some help here}', }),
$0
endsnippet

snippet fm2o
'${1:fieldname}': fields.many2one('${2:reference.model}', u'${3:Field Name}', required=${4:False}, ${5:domain=[('parent_id', '=', False)], }${6:track_visibility='${7:onchange}', }${8:help=u'${9:Some help here}', }),
$0
endsnippet

snippet fm2m
'${1:fieldname}': fields.many2many('${2:reference.model}', '${3:this_model}_`!p snip.rv = points2underscores(t[2])`_rel', '${4:remote_model_field}_id', '${5:`!p snip.rv = t[1][:-1]`}', u'${6:Field Name}', required=${8:False}, ${9:domain=[('parent_id', '=', False)], }${10:track_visibility='${11:onchange}', }${12:help=u'${13:Some help here}', }),
$0
endsnippet

snippet columns
_columns = {
	$0
}
endsnippet 

snippet groupby
def $2(self, cr, uid, ids, domain, read_group_order=None, access_rights_uid=None, context=None):
	access_rights_uid = access_rights_uid or uid
	model = self.pool['${3:model.with.points}']
	order = '${4:field ASC}'
	domain = [$5]
	ids = model.search(cr, uid, domain, order=order, access_rights_uid=access_rights_uid, context=context)
	result = model.name_get(cr, access_rights_uid, ids, context=context)
	return result

_group_by_full = {
	'${1:some_field_name}': _${2:_read_group_$1},
}

$0
endsnippet

snippet logimport
import logging

_logger = logging.getLogger(__name__)
$0
endsnippet 

snippet logger
_logger.error("$1 = %s" % ($1, ))
endsnippet 

snippet defcreate
def create(self, cr, uid, vals, context=None):
	if context is None:
		context = {}
	${0:# you can modify vals before creating the object with vals.update({'some_field': new_value})}
	id = super(${1:model_with_underscores}, self).create(cr, uid, vals, context=context)
	return id

endsnippet

snippet defcopy
def copy(self, cr, uid, id, default=None, context=None):
	if default is None:
		default = {}
	if context is None:
		context = {}
	${0:# you can modify values (default) before writing the object with default({'some_field': new_value})}
	return super(${1:model_with_underscores}, self).copy(cr, uid, id, default=default, context=context)

endsnippet

snippet deffields_view_get
def fields_view_get(self, cr, uid, view_id=None, view_type='form', context={}, toolbar=False):
	if context is None:
		context = {}
	ctx = context.copy()
	res = super(${1:model_with_underscores}, self).fields_view_get(cr, uid, view_id, view_type, context=ctx, toolbar=toolbar)
	if view_type == '${2:tree|form|search|calendar|graph}':
		# use res['arch'} to modify your view, it is a string, so just use replace
		${0:pass}
	return res

endsnippet

snippet defname_search
def name_search(self, cr, uid, name, args=None, operator='ilike', context=None, limit=100):
	if not args:
		args = []
	ids = []
	${0:# You need to search for ids matching some criteria
	#
	# Example with self.search
	#
	#		ids = self.search(cr, uid, [('name', operator, name)] + args, limit=limit, context=context)
	#
	# Example with sql query:
	#
	#		query = "select id from event_registration_line where regexp_replace(cnpj_cpf, '[^0-9]', '', 'g') ilike concat('%%', regexp_replace('%s', '[^0-9]', '', 'g'), '%%') and state in ('draft', 'verified', 'open', 'absent', 'present')" % name
	# 		cr.execute(query)
	# 		ids += filter(None, map(lambda x:x[0], cr.fetchall()))}
	ids = list(set(ids))
	return self.name_get(cr, uid, ids, context)

endsnippet

snippet defonchange
def on_change_${1:main_field}(self, cr, uid, ids, $1, ${2:additionalField1, additionalField2, }context=None):
	if not $1:
		return {}
	if context is None:
		context = {}
	${3:# Do something here}
	return {
		'value': {
			'${4:modified_field}': ${5:new_value},
		},
		${6:'warning': {
			'title': _('${7:Some Title Here}'),
			'message' : _('${8:Some Warning message}')
		}}
	}

$0
endsnippet

snippet defwrite
def write(self, cr, uid, ids, vals, context=None):
	if context is None:
		context = {}
	${0:# you can modify vals before writing the object with vals.update({'some_field': new_value})}
	return super(${1:model_with_underscores}, self).write(cr, uid, ids, vals, context=context)

endsnippet

snippet defname_get
def name_get(self, cr, uid, ids, context=None):
	if not len(ids):
		return []
	if context is None:
		context = {}
	res = []
	for o in self.browse(cr, uid, ids, context=context):
		${0:res.append((o.id, "[%s] %s" % (o.field1, field2)))}
	return res  # It must return a list of tuples [(id1, name1), (id2, name2)]

endsnippet
