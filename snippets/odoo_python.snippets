####################################################################################################
# Helpers
####################################################################################################
global !p
def points2underscores(txt):
	return txt.replace('.', '_')

def underscores2points(txt):
	return txt.replace('_', '.')

def ffunction_field_type(type):
	options = {
		'many2many': "relation='model.with.points', ",
		'one2many': "relation='model.with.points', ",
		'many2one': "relation='model.with.points', ",
		'float': "digits_compute=dp.get_precision('Account'),  # Remember to import dp",
		'char': "size=64, ",
	}
	return type in options and options[type] or ''

def complete(t, opts):
	options = {
		'fieldtypes': ['integer', 'boolean', 'float', 'char', 'text', 'date', 'datetime', 'one2many', 'many2many', 'many2one', 'binary', 'selection', 'related'],
		'weekdays': ['monday', 'tuesday'],
		'operators': ['=', 'like', 'ilike', '<', '>', '<=', '>=', 'in', 'not in'],
		'viewtypes': ['tree', 'form', 'search', 'calendar', 'graph'],
		'track_visibility': ['onchange', 'always'],
		'ondelete': ['cascade', 'restrict', 'set null'],
		'widgets': ['char', 'id', 'email', 'url', 'text', 'html', 'date', 'datetime', 'selection', 'many2one', 'many2onebutton', 'many2many', 'many2many_tags', 'many2many_kanban', 'one2many', 'one2many_list', 'reference', 'boolean', 'float', 'integer', 'float_time', 'progressbar', 'image', 'binary', 'many2many_binary', 'statusbar', 'monetary'],
		'positions': ['before', 'after', 'inside', 'replace'],
		'colors': ['todo', 'todo'],  # TODO
		'fonts': ['todo', 'todo'],  # TODO
	}
	if isinstance(opts, str) and opts in options:
		opts = options[opts]
	if t:
		opts = [ m[len(t):] for m in opts if m.startswith(t) ]
	if len(opts) == 1:
		return opts[0]
	return '(' + '|'.join(opts) + ')'
endglobal

snippet start "" b
# -*- coding: utf-8 -*-
$0

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
endsnippet

####################################################################################################
# Imports
####################################################################################################

snippet importopenerp "" b
from openerp.osv import osv, fields, orm
from openerp.tools.translate import _ $0
endsnippet

snippet importapi "from openerp import api" b
from openerp import api $0
endsnippet

snippet import_ "" b
from openerp.tools.translate import _
endsnippet

snippet importdatetime "" b
from datetime import datetime, timedelta
from dateutil import relativedelta
from dateutil.parser import parse $0
endsnippet

snippet importdp "" b
from openerp.addons.decimal_precision import decimal_precision as dp $0
endsnippet

snippet importlog "" b
import logging

_logger = logging.getLogger(__name__) $0
endsnippet 

####################################################################################################
# Class
####################################################################################################

snippet class "" b
class ${1:modulenale_modelname}(osv.osv):
    _name = '`!p snip.rv = underscores2points(t[1])`'
    _inherit = '`!p snip.rv = underscores2points(t[1])`'
    _description = u'${2:put some model description here}'

	$0
endsnippet

####################################################################################################
# Field types
####################################################################################################

snippet fboolean "fields.boolean" b
'${1:fieldname}': fields.boolean(u'${2:Field Name}', $5), $0
endsnippet

snippet fchar "fields.char" b
'${1:fieldname}': fields.char(u'${2:Field Name}', size=${3:64}, ${4:translate=True, }$5), $0
endsnippet

snippet fdate "fields.date" b
'${1:fieldname}': fields.date(u'${2:Field Name}', $3), $0
endsnippet

snippet fdatetime "fields.datetime" b
'${1:fieldname}': fields.datetime(u'${2:Field Name}', $3), $0
endsnippet

snippet ffloat "fields.float" b
'${1:fieldname}': fields.float(u'${2:Field Name}', ${3:digits_compute=dp.get_precision('Account'), }$4),  # Remember to import dp $0
endsnippet

snippet ffunction "fields.function" b
'${1:fieldname}': fields.function(_$1, string=u'${2:Pretty name of your field}', type="$3`!p snip.rv = complete(t[3], 'fieldtypes')`", ${4:`!p snip.rv = ffunction_field_type(t[3]) `}
	${5:store={
		'${6:current.model.with.underscores}': (lambda self, cr, uid, ids, c={}: ids, [${7:'field1', 'field2'}], 20),
		'${8:different.model.with.underscores}': (_get_`!p snip.rv = points2underscores(t[6])`_from_`!p snip.rv = points2underscores(t[7])`, [${9:'field1', 'field2'}], 20),
	},}${10: multi='${11:arbitrary_name}',} $12), $0
endsnippet

snippet finteger "fields.integer" b
'${1:fieldname}': fields.integer(u'${2:Field Name}', $3), $0
endsnippet

snippet fo2m "fields.one2many" b
'${1:fieldname}': fields.one2many('${2:reference.model}', '${3:reference_field}_id', u'${4:Field Name}', $5), $0
endsnippet

snippet fm2o "fields.many2one" b
'${1:fieldname}': fields.many2one('${2:reference.model}', u'${3:Field Name}', $6), $0
endsnippet

snippet fm2m "fields.many2many" b
'${1:fieldname}': fields.many2many('${2:reference.model}', '${3:this_model}_`!p snip.rv = points2underscores(t[2])`_rel', '${4:remote_model_field}_id', '${5:`!p snip.rv = t[1][:-1]`}', string=u'${6:Field Name}', $7), $0
endsnippet

snippet frelated "fields.related" b
'${1:fieldname}': fields.related('${2:another_relation_field_in_this_model}', '${3:field_in_remote_model}', string=u'${4:Pretty name of your field}', type="$5`!p snip.rv = complete(t[5], 'fieldtypes')`", ${6:`!p snip.rv = ffunction_field_type(t[5]) `}
	${7:store={
		'${8:current.model.with.points}': (lambda self, cr, uid, ids, c={}: ids, [${9:'$2'}], 20),
		'${10:model.of.the.relation.field.with.points}': (_get_`!p snip.rv = points2underscores(t[8])`_from_`!p snip.rv = points2underscores(t[10])`, [${11:'$3'}], 20),
	},} $13), $0
endsnippet

snippet fselection "fields.selection" b
'${1:fieldname}': fields.selection([
	('${3:state1}', u'${4:Name 1}'),
	('${5:state2}', u'${6:Name 2}'),
	], u'${2:Name}', $7), $0
endsnippet

snippet fsequence "fields.sequence" b
_columns = {
	'${1:field_name}': fields.integer(u'${2:Pretty name}', ),
}
_defaults = {
	'$1': lambda self, cr, uid, context={}: self.pool['ir.sequence'].get(cr, uid, '${2:the_name_or_your_sequence}'),
}
endsnippet

snippet ftext "fields.text" b
'${1:fieldname}': fields.text(u'${2:Field Name}', ${3:translate=True, }$4), $0
endsnippet

####################################################################################################
# Fields types' attributes
####################################################################################################

snippet ondelete "ondelete"
ondelete="$1`!p snip.rv = complete(t[1], 'ondelete')`", $0
endsnippet

snippet required ""
required=${1:True}, $0
endsnippet

snippet track_visibility ""
track_visibility='$1`!p snip.rv = complete(t[1], 'track_visibility')`', $0
endsnippet

snippet columns ""
_columns = {
	$0
}
endsnippet 

snippet constraint "SQL Constraint"
_sql_constraints = [
	('${1:fieldname}_uniq', 'UNIQUE($1${2:, ${3:another_field}})', u'${4:Error message here}')
]
$0
endsnippet

snippet defaults ""
_defaults = {
	$0
}
endsnippet 

snippet help ""
help=u'${1:Some help here}', $0
endsnippet

snippet dom ""
('${1:field}', '$2`!p snip.rv = complete('operators')`', ${3:value})
endsnippet

snippet domain ""
('${1:field}', '$2`!p snip.rv = complete('operators')`', ${3:value})
endsnippet

####################################################################################################
# Class attributes
####################################################################################################

snippet groupby "" b
def $2(self, cr, uid, ids, domain, read_group_order=None, access_rights_uid=None, context=None):
	access_rights_uid = access_rights_uid or uid
	model = self.pool['${3:model.with.points}']
	order = '${4:field ASC}'
	domain = [$5]
	ids = model.search(cr, uid, domain, order=order, access_rights_uid=access_rights_uid, context=context)
	result = model.name_get(cr, access_rights_uid, ids, context=context)
	return result

_group_by_full = {
	'${1:some_field_name}': _${2:_read_group_$1},
}

$0
endsnippet

snippet order "" b
_order = '${1:some_field} ${2:ASC}'
endsnippet

####################################################################################################
# ORM calls
####################################################################################################

snippet create ""
$2create(cr, uid, ${1:vals}, context)$0
endsnippet

snippet browse ""
$2browse(cr, uid, ${1:ids}, context)$0
endsnippet

snippet search ""
$10search(cr, uid, ${1:domain},${2: offset=${3:0},}${4: limit=${5:50},}${6: order='${7:field ASC}',}${8: count=${9:True},} context=None, )$0
endsnippet

####################################################################################################
# ORM functions
####################################################################################################

snippet defcreate "def create" b
def create(self, cr, uid, vals, context=None):
	if context is None:
		context = {}
	${0:# you can modify vals before creating the object with vals.update({'some_field': new_value})}
	id = super(${1:model_with_underscores}, self).create(cr, uid, vals, context=context)
	return id

endsnippet

snippet defcopy "def copy" b
def copy(self, cr, uid, id, default=None, context=None):
	if default is None:
		default = {}
	if context is None:
		context = {}
	${0:# you can modify values (default) before writing the object with default({'some_field': new_value})}
	return super(${1:model_with_underscores}, self).copy(cr, uid, id, default=default, context=context)

endsnippet

snippet deffields_view_get "def fields_view_get" b
def fields_view_get(self, cr, uid, view_id=None, view_type='form', context={}, toolbar=False):
	if context is None:
		context = {}
	ctx = context.copy()
	res = super(${1:model_with_underscores}, self).fields_view_get(cr, uid, view_id, view_type, context=ctx, toolbar=toolbar)
	if view_type == '$2`!p snip.rv = complete(t[2], 'viewtypes')`':
		# use res['arch'} to modify your view, it is a string, so just use replace
		${0:pass}
	return res

endsnippet

snippet defname_search "def name_search" b
def name_search(self, cr, uid, name, args=None, operator='ilike', context=None, limit=100):
	if not args:
		args = []
	ids = []
	${0:# You need to search for ids matching some criteria
	#
	# Example with self.search
	#
	#		ids = self.search(cr, uid, [('name', operator, name)] + args, limit=limit, context=context)
	#
	# Example with sql query:
	#
	#		query = "select id from event_registration_line where regexp_replace(cnpj_cpf, '[^0-9]', '', 'g') ilike concat('%%', regexp_replace('%s', '[^0-9]', '', 'g'), '%%') and state in ('draft', 'verified', 'open', 'absent', 'present')" % name
	# 		cr.execute(query)
	# 		ids += filter(None, map(lambda x:x[0], cr.fetchall()))}
	ids = list(set(ids))
	return self.name_get(cr, uid, ids, context)

endsnippet

snippet defonchange "def onchange" b
def on_change_${1:main_field}(self, cr, uid, ids, $1, ${2:additionalField1, additionalField2, }context=None):
	if not $1:
		return {}
	if context is None:
		context = {}
	${3:# Do something here}
	return {
		'value': {
			'${4:modified_field}': ${5:new_value},
		},
		'domain': {
			'${6:modified_field}': ${7:new_value},
		},
		${8:'warning': {
			'title': _('${9:Some Title Here}'),
			'message' : _('${10:Some Warning message}')
		}}
	}

$0
endsnippet

snippet defwrite "def write" b
def write(self, cr, uid, ids, vals, context=None):
	if context is None:
		context = {}
	${0:# you can modify vals before writing the object with vals.update({'some_field': new_value})}
	return super(${1:model_with_underscores}, self).write(cr, uid, ids, vals, context=context)

endsnippet

snippet defname_get "def name_get" b
def name_get(self, cr, uid, ids, context=None):
	if not len(ids):
		return []
	if context is None:
		context = {}
	res = []
	for o in self.browse(cr, uid, ids, context=context):
		${0:res.append((o.id, "[%s] %s" % (o.field1, field2)))}
	return res  # It must return a list of tuples [(id1, name1), (id2, name2)]

endsnippet

####################################################################################################
# Function, Store and Related fields helper functions
####################################################################################################
snippet defstore "def store_function_get_model1_from_model2" b
def _get_${1:destination_model}_from_${2:origin_model}(self, cr, uid, ids, context=None):
	if context is None:
		context = {}
	res = {}
	for o in self.pool['`!p snip.rv = underscores2points(t[2])`'].browse(cr, uid, ids, context=context):
		${4:# Add some logic here}
		res[o.${3:parent_id.id}] = True
	return res.keys()

$0
endsnippet

snippet deffunction "def function_field_helper" b
def _${1:function_name}(self, cr, uid, ids, name, arg, context=None):
	if context is None:
		context = {}
	res = {}
	for o in self.browse(cr, uid, ids, context=context):
		res[o.id] = ${2:None}  # Default value
		${3:# TODO: some stuff here}
		res[o.id] = ${4:None}  # Give it a value here
	return res

$0
endsnippet

snippet deffunctionmulti "def function_field_helper (with multi)" b
def _${1:function_name}(self, cr, uid, ids, name, arg, context=None):
	if context is None:
		context = {}
	res = {}
	for o in self.browse(cr, uid, ids, context=context):
		res[o.id] = ${2:None}  # Default value
		${3:# TODO: some stuff here}
		res[o.id] = {
			'${4:field1}': ${5:value1},  # Give it a value here
			'${6:field2}': ${7:value2},  # Give it a value here
			}
	return res

$0
endsnippet

snippet deffnct_search "def fnct_search" b
def _${1:function_name}(self, cr, uid, obj, name, domain, context=None):
	${2:# Use the domain passed as argument}
	return [${3:('return', 'some', 'domain')}]

$0
endsnippet

####################################################################################################
# Miscelaneous
####################################################################################################

snippet def "def -> regular function" b
def ${1:function_name}(self, cr, uid, ids, context=None):
	if context is None:
		context = {}
	res = {}
	${0:# Do some stuff here}
	return res

endsnippet

snippet defbutton "Function called by buttons" b
def button_${1:function_name}(self, cr, uid, ids, context=None):
	${0:# TODO : Do something here}
	return True

endsnippet

snippet defcron "Functions called by a cron job" b
def ${1:function_name}(self, cr, uid, context=None):
	if context is None:
		context = {}
	${2:# TODO : Do something here}
	return True

endsnippet

snippet logger "" b
_logger.error("$1 = %s" % ($1, ))
$0
endsnippet 

snippet logerror "" b
_logger.error("$1 = %s" % ($1, ))
$0
endsnippet 

snippet logwarning "" b
_logger.warning("$1 = %s" % ($1, ))
$0
endsnippet 

snippet loginfo "" b
_logger.info("$1 = %s" % ($1, ))
$0
endsnippet 

snippet strftime ""
strftime('${2:'%Y-%m-%d %H:%M:%S'}')
endsnippet

snippet strptime ""
strptime(${1:some_date_field}, '${2:'%Y-%m-%d %H:%M:%S'}')
endsnippet

snippet todo "TODO comment" b
# TODO ${1: 1-5 priority (the lower the more prioritary)}: ${2:Write something that need to me done here} (`date +%d`/`date +%m`/`date +%Y` by: `getent passwd "jash" | cut -d ':' -f 5`)
$0
endsnippet
